name: Build

on: [push, pull_request]

jobs:
  Linux:
    runs-on: ubuntu-20.04
    
    env:
      BUILD_TYPE: Release
      CC: ${{ matrix.cc }}
      CXX: ${{ matrix.cxx }}
  
    strategy:
      fail-fast: false
      matrix:
        include:
          - cc: clang
            cxx: clang++
            cmake_options: -DENABLE_PRECOMPILED_HEADERS=OFF -DSAMPLES_BACKEND=GLFW_GL2
          - cc: clang
            cxx: clang++
            cmake_options: -DSAMPLES_BACKEND=SDL_VK
          - cmake_options: -DBUILD_TESTING=ON -DENABLE_PRECOMPILED_HEADERS=OFF
            enable_testing: true
          - cmake_options: -DNO_FONT_INTERFACE_DEFAULT=ON -DENABLE_LOTTIE_PLUGIN=ON -DSAMPLES_BACKEND=X11_GL2
          - cmake_options: -DDISABLE_RTTI_AND_EXCEPTIONS=ON -DSAMPLES_BACKEND=SDL_GL2
          - cmake_options: -DNO_THIRDPARTY_CONTAINERS=ON -DSAMPLES_BACKEND=SFML_GL2
          - cmake_options: -DSAMPLES_BACKEND=SDL_VK -DRMLUI_VK_DEBUG=ON -DENABLE_PRECOMPILED_HEADERS=OFF -DCMAKE_BUILD_TYPE=Debug

    steps:
    - uses: actions/checkout@v3
      
    - name: Install Dependencies
      run: |-
        sudo apt-get update
        sudo apt-get install cmake ninja-build libsdl2-dev libsdl2-image-dev libfreetype6-dev libglew-dev liblua5.2-dev libsfml-dev librlottie-dev libglfw3-dev
      
    - name: Create Build Environment
      run: cmake -E make_directory ${{github.workspace}}/Build

    - name: Configure CMake
      working-directory: ${{github.workspace}}/Build
      run: >-
        cmake $GITHUB_WORKSPACE -G Ninja -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_LUA_BINDINGS=ON -DBUILD_SAMPLES=ON -DWARNINGS_AS_ERRORS=ON
        ${{ matrix.cmake_options }}

    - name: Build
      working-directory: ${{github.workspace}}/Build
      run: cmake --build . --config $BUILD_TYPE

    - name: Test
      if: ${{ matrix.enable_testing }}
      working-directory: ${{github.workspace}}/Build
      run: ctest -C $BUILD_TYPE


  macOS:
    runs-on: macos-latest
    
    env:
      BUILD_TYPE: Release
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - cmake_options: -DSAMPLES_BACKEND=auto
          - cmake_options: -DSAMPLES_BACKEND=GLFW_GL2
    
    steps:
    - uses: actions/checkout@v3
      
    - name: Install Dependencies
      run: brew install lua sdl2 sdl2_image glfw
      
    - name: Create Build Environment
      run: cmake -E make_directory ${{github.workspace}}/Build

    - name: Configure CMake
      working-directory: ${{github.workspace}}/Build
      run: >-
        cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_LUA_BINDINGS=ON -DBUILD_SAMPLES=ON -DWARNINGS_AS_ERRORS=ON
        ${{ matrix.cmake_options }}

    - name: Build
      working-directory: ${{github.workspace}}/Build
      run: cmake --build . --config $BUILD_TYPE


  Windows:
    runs-on: windows-latest
    
    env:
      BUILD_TYPE: Release
      VCPKG_DEFAULT_TRIPLET: x64-windows
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - cmake_options: -DSAMPLES_BACKEND=auto -DENABLE_PRECOMPILED_HEADERS=OFF
          - cmake_options: -DSAMPLES_BACKEND=Win32_VK -DRMLUI_VK_DEBUG=ON
          - cmake_options: -DSAMPLES_BACKEND=SDL_VK -DBUILD_LUA_BINDINGS_FOR_LUAJIT=ON
    
    steps:
    - uses: actions/checkout@v3
      
    - name: Install Dependencies
      run: C:\vcpkg\vcpkg install freetype[core] sdl2[core,vulkan] lua[core] luajit
      
    - name: Create Build Environment
      run: cmake -E make_directory ${{github.workspace}}/Build

    - name: Configure CMake
      working-directory: ${{github.workspace}}/Build
      run: >-
        cmake $env:GITHUB_WORKSPACE -A x64 -DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=$env:BUILD_TYPE -DBUILD_LUA_BINDINGS=ON -DBUILD_SAMPLES=ON -DWARNINGS_AS_ERRORS=ON
        -DCMAKE_TOOLCHAIN_FILE="C:/vcpkg/scripts/buildsystems/vcpkg.cmake"
        ${{ matrix.cmake_options }}

    - name: Build
      working-directory: ${{github.workspace}}/Build
      run: cmake --build . --config $env:BUILD_TYPE


  Emscripten:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3

    - name: Install Dependencies
      run: |-
        sudo apt-get update
        sudo apt-get install cmake
        wget -q https://github.com/emscripten-core/emsdk/archive/master.tar.gz
        tar -xvf master.tar.gz
        emsdk-master/emsdk update
        emsdk-master/emsdk install latest
        emsdk-master/emsdk activate latest
              
    - name: Create Build Environment
      run: cmake -E make_directory Build
      
    - name: Configure CMake
      run: |-
        source emsdk-master/emsdk_env.sh
        cd Build
        emcmake cmake $GITHUB_WORKSPACE -DBUILD_SAMPLES=ON -DBUILD_SHARED_LIBS=OFF -DWARNINGS_AS_ERRORS=ON -DEMSCRIPTEN_EXE_FLAGS="-O1"

    - name: Build
      run: |-
        source emsdk-master/emsdk_env.sh
        cd Build
        emmake make -j4
